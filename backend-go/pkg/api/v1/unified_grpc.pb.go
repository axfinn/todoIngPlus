// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: unified.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnifiedService_GetUnifiedUpcoming_FullMethodName = "/todoing.api.v1.UnifiedService/GetUnifiedUpcoming"
	UnifiedService_GetUnifiedCalendar_FullMethodName = "/todoing.api.v1.UnifiedService/GetUnifiedCalendar"
)

// UnifiedServiceClient is the client API for UnifiedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnifiedServiceClient interface {
	GetUnifiedUpcoming(ctx context.Context, in *GetUnifiedUpcomingRequest, opts ...grpc.CallOption) (*GetUnifiedUpcomingResponse, error)
	GetUnifiedCalendar(ctx context.Context, in *GetUnifiedCalendarRequest, opts ...grpc.CallOption) (*GetUnifiedCalendarResponse, error)
}

type unifiedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnifiedServiceClient(cc grpc.ClientConnInterface) UnifiedServiceClient {
	return &unifiedServiceClient{cc}
}

func (c *unifiedServiceClient) GetUnifiedUpcoming(ctx context.Context, in *GetUnifiedUpcomingRequest, opts ...grpc.CallOption) (*GetUnifiedUpcomingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnifiedUpcomingResponse)
	err := c.cc.Invoke(ctx, UnifiedService_GetUnifiedUpcoming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifiedServiceClient) GetUnifiedCalendar(ctx context.Context, in *GetUnifiedCalendarRequest, opts ...grpc.CallOption) (*GetUnifiedCalendarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnifiedCalendarResponse)
	err := c.cc.Invoke(ctx, UnifiedService_GetUnifiedCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnifiedServiceServer is the server API for UnifiedService service.
// All implementations must embed UnimplementedUnifiedServiceServer
// for forward compatibility.
type UnifiedServiceServer interface {
	GetUnifiedUpcoming(context.Context, *GetUnifiedUpcomingRequest) (*GetUnifiedUpcomingResponse, error)
	GetUnifiedCalendar(context.Context, *GetUnifiedCalendarRequest) (*GetUnifiedCalendarResponse, error)
	mustEmbedUnimplementedUnifiedServiceServer()
}

// UnimplementedUnifiedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnifiedServiceServer struct{}

func (UnimplementedUnifiedServiceServer) GetUnifiedUpcoming(context.Context, *GetUnifiedUpcomingRequest) (*GetUnifiedUpcomingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnifiedUpcoming not implemented")
}
func (UnimplementedUnifiedServiceServer) GetUnifiedCalendar(context.Context, *GetUnifiedCalendarRequest) (*GetUnifiedCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnifiedCalendar not implemented")
}
func (UnimplementedUnifiedServiceServer) mustEmbedUnimplementedUnifiedServiceServer() {}
func (UnimplementedUnifiedServiceServer) testEmbeddedByValue()                        {}

// UnsafeUnifiedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnifiedServiceServer will
// result in compilation errors.
type UnsafeUnifiedServiceServer interface {
	mustEmbedUnimplementedUnifiedServiceServer()
}

func RegisterUnifiedServiceServer(s grpc.ServiceRegistrar, srv UnifiedServiceServer) {
	// If the following call pancis, it indicates UnimplementedUnifiedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnifiedService_ServiceDesc, srv)
}

func _UnifiedService_GetUnifiedUpcoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnifiedUpcomingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedServiceServer).GetUnifiedUpcoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedService_GetUnifiedUpcoming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedServiceServer).GetUnifiedUpcoming(ctx, req.(*GetUnifiedUpcomingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnifiedService_GetUnifiedCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnifiedCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedServiceServer).GetUnifiedCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedService_GetUnifiedCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedServiceServer).GetUnifiedCalendar(ctx, req.(*GetUnifiedCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnifiedService_ServiceDesc is the grpc.ServiceDesc for UnifiedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnifiedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoing.api.v1.UnifiedService",
	HandlerType: (*UnifiedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnifiedUpcoming",
			Handler:    _UnifiedService_GetUnifiedUpcoming_Handler,
		},
		{
			MethodName: "GetUnifiedCalendar",
			Handler:    _UnifiedService_GetUnifiedCalendar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unified.proto",
}
