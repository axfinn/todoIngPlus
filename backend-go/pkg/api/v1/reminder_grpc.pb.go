// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: reminder.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReminderService_CreateReminder_FullMethodName       = "/todoing.api.v1.ReminderService/CreateReminder"
	ReminderService_GetReminder_FullMethodName          = "/todoing.api.v1.ReminderService/GetReminder"
	ReminderService_UpdateReminder_FullMethodName       = "/todoing.api.v1.ReminderService/UpdateReminder"
	ReminderService_DeleteReminder_FullMethodName       = "/todoing.api.v1.ReminderService/DeleteReminder"
	ReminderService_ListReminders_FullMethodName        = "/todoing.api.v1.ReminderService/ListReminders"
	ReminderService_ListSimpleReminders_FullMethodName  = "/todoing.api.v1.ReminderService/ListSimpleReminders"
	ReminderService_GetUpcomingReminders_FullMethodName = "/todoing.api.v1.ReminderService/GetUpcomingReminders"
	ReminderService_PreviewReminder_FullMethodName      = "/todoing.api.v1.ReminderService/PreviewReminder"
	ReminderService_SnoozeReminder_FullMethodName       = "/todoing.api.v1.ReminderService/SnoozeReminder"
	ReminderService_ToggleReminderActive_FullMethodName = "/todoing.api.v1.ReminderService/ToggleReminderActive"
	ReminderService_CreateTestReminder_FullMethodName   = "/todoing.api.v1.ReminderService/CreateTestReminder"
)

// ReminderServiceClient is the client API for ReminderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderServiceClient interface {
	CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...grpc.CallOption) (*CreateReminderResponse, error)
	GetReminder(ctx context.Context, in *GetReminderRequest, opts ...grpc.CallOption) (*GetReminderResponse, error)
	UpdateReminder(ctx context.Context, in *UpdateReminderRequest, opts ...grpc.CallOption) (*UpdateReminderResponse, error)
	DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*Response, error)
	ListReminders(ctx context.Context, in *ListRemindersRequest, opts ...grpc.CallOption) (*ListRemindersResponse, error)
	ListSimpleReminders(ctx context.Context, in *ListSimpleRemindersRequest, opts ...grpc.CallOption) (*ListSimpleRemindersResponse, error)
	GetUpcomingReminders(ctx context.Context, in *GetUpcomingRemindersRequest, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error)
	PreviewReminder(ctx context.Context, in *PreviewReminderRequest, opts ...grpc.CallOption) (*PreviewReminderResponse, error)
	SnoozeReminder(ctx context.Context, in *SnoozeReminderRequest, opts ...grpc.CallOption) (*SnoozeReminderResponse, error)
	ToggleReminderActive(ctx context.Context, in *ToggleReminderActiveRequest, opts ...grpc.CallOption) (*ToggleReminderActiveResponse, error)
	CreateTestReminder(ctx context.Context, in *CreateTestReminderRequest, opts ...grpc.CallOption) (*CreateTestReminderResponse, error)
}

type reminderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderServiceClient(cc grpc.ClientConnInterface) ReminderServiceClient {
	return &reminderServiceClient{cc}
}

func (c *reminderServiceClient) CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...grpc.CallOption) (*CreateReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_CreateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) GetReminder(ctx context.Context, in *GetReminderRequest, opts ...grpc.CallOption) (*GetReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_GetReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) UpdateReminder(ctx context.Context, in *UpdateReminderRequest, opts ...grpc.CallOption) (*UpdateReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_UpdateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ReminderService_DeleteReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) ListReminders(ctx context.Context, in *ListRemindersRequest, opts ...grpc.CallOption) (*ListRemindersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRemindersResponse)
	err := c.cc.Invoke(ctx, ReminderService_ListReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) ListSimpleReminders(ctx context.Context, in *ListSimpleRemindersRequest, opts ...grpc.CallOption) (*ListSimpleRemindersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSimpleRemindersResponse)
	err := c.cc.Invoke(ctx, ReminderService_ListSimpleReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) GetUpcomingReminders(ctx context.Context, in *GetUpcomingRemindersRequest, opts ...grpc.CallOption) (*GetUpcomingRemindersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingRemindersResponse)
	err := c.cc.Invoke(ctx, ReminderService_GetUpcomingReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) PreviewReminder(ctx context.Context, in *PreviewReminderRequest, opts ...grpc.CallOption) (*PreviewReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviewReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_PreviewReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) SnoozeReminder(ctx context.Context, in *SnoozeReminderRequest, opts ...grpc.CallOption) (*SnoozeReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnoozeReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_SnoozeReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) ToggleReminderActive(ctx context.Context, in *ToggleReminderActiveRequest, opts ...grpc.CallOption) (*ToggleReminderActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleReminderActiveResponse)
	err := c.cc.Invoke(ctx, ReminderService_ToggleReminderActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) CreateTestReminder(ctx context.Context, in *CreateTestReminderRequest, opts ...grpc.CallOption) (*CreateTestReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestReminderResponse)
	err := c.cc.Invoke(ctx, ReminderService_CreateTestReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderServiceServer is the server API for ReminderService service.
// All implementations must embed UnimplementedReminderServiceServer
// for forward compatibility.
type ReminderServiceServer interface {
	CreateReminder(context.Context, *CreateReminderRequest) (*CreateReminderResponse, error)
	GetReminder(context.Context, *GetReminderRequest) (*GetReminderResponse, error)
	UpdateReminder(context.Context, *UpdateReminderRequest) (*UpdateReminderResponse, error)
	DeleteReminder(context.Context, *DeleteReminderRequest) (*Response, error)
	ListReminders(context.Context, *ListRemindersRequest) (*ListRemindersResponse, error)
	ListSimpleReminders(context.Context, *ListSimpleRemindersRequest) (*ListSimpleRemindersResponse, error)
	GetUpcomingReminders(context.Context, *GetUpcomingRemindersRequest) (*GetUpcomingRemindersResponse, error)
	PreviewReminder(context.Context, *PreviewReminderRequest) (*PreviewReminderResponse, error)
	SnoozeReminder(context.Context, *SnoozeReminderRequest) (*SnoozeReminderResponse, error)
	ToggleReminderActive(context.Context, *ToggleReminderActiveRequest) (*ToggleReminderActiveResponse, error)
	CreateTestReminder(context.Context, *CreateTestReminderRequest) (*CreateTestReminderResponse, error)
	mustEmbedUnimplementedReminderServiceServer()
}

// UnimplementedReminderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReminderServiceServer struct{}

func (UnimplementedReminderServiceServer) CreateReminder(context.Context, *CreateReminderRequest) (*CreateReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedReminderServiceServer) GetReminder(context.Context, *GetReminderRequest) (*GetReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminder not implemented")
}
func (UnimplementedReminderServiceServer) UpdateReminder(context.Context, *UpdateReminderRequest) (*UpdateReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}
func (UnimplementedReminderServiceServer) DeleteReminder(context.Context, *DeleteReminderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}
func (UnimplementedReminderServiceServer) ListReminders(context.Context, *ListRemindersRequest) (*ListRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReminders not implemented")
}
func (UnimplementedReminderServiceServer) ListSimpleReminders(context.Context, *ListSimpleRemindersRequest) (*ListSimpleRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimpleReminders not implemented")
}
func (UnimplementedReminderServiceServer) GetUpcomingReminders(context.Context, *GetUpcomingRemindersRequest) (*GetUpcomingRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingReminders not implemented")
}
func (UnimplementedReminderServiceServer) PreviewReminder(context.Context, *PreviewReminderRequest) (*PreviewReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewReminder not implemented")
}
func (UnimplementedReminderServiceServer) SnoozeReminder(context.Context, *SnoozeReminderRequest) (*SnoozeReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnoozeReminder not implemented")
}
func (UnimplementedReminderServiceServer) ToggleReminderActive(context.Context, *ToggleReminderActiveRequest) (*ToggleReminderActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleReminderActive not implemented")
}
func (UnimplementedReminderServiceServer) CreateTestReminder(context.Context, *CreateTestReminderRequest) (*CreateTestReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestReminder not implemented")
}
func (UnimplementedReminderServiceServer) mustEmbedUnimplementedReminderServiceServer() {}
func (UnimplementedReminderServiceServer) testEmbeddedByValue()                         {}

// UnsafeReminderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderServiceServer will
// result in compilation errors.
type UnsafeReminderServiceServer interface {
	mustEmbedUnimplementedReminderServiceServer()
}

func RegisterReminderServiceServer(s grpc.ServiceRegistrar, srv ReminderServiceServer) {
	// If the following call pancis, it indicates UnimplementedReminderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReminderService_ServiceDesc, srv)
}

func _ReminderService_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_CreateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).CreateReminder(ctx, req.(*CreateReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_GetReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).GetReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_GetReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).GetReminder(ctx, req.(*GetReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_UpdateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, req.(*UpdateReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_DeleteReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, req.(*DeleteReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_ListReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).ListReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_ListReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).ListReminders(ctx, req.(*ListRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_ListSimpleReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimpleRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).ListSimpleReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_ListSimpleReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).ListSimpleReminders(ctx, req.(*ListSimpleRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_GetUpcomingReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).GetUpcomingReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_GetUpcomingReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).GetUpcomingReminders(ctx, req.(*GetUpcomingRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_PreviewReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).PreviewReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_PreviewReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).PreviewReminder(ctx, req.(*PreviewReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_SnoozeReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnoozeReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).SnoozeReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_SnoozeReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).SnoozeReminder(ctx, req.(*SnoozeReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_ToggleReminderActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleReminderActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).ToggleReminderActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_ToggleReminderActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).ToggleReminderActive(ctx, req.(*ToggleReminderActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_CreateTestReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).CreateTestReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_CreateTestReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).CreateTestReminder(ctx, req.(*CreateTestReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReminderService_ServiceDesc is the grpc.ServiceDesc for ReminderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReminderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoing.api.v1.ReminderService",
	HandlerType: (*ReminderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReminder",
			Handler:    _ReminderService_CreateReminder_Handler,
		},
		{
			MethodName: "GetReminder",
			Handler:    _ReminderService_GetReminder_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _ReminderService_UpdateReminder_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _ReminderService_DeleteReminder_Handler,
		},
		{
			MethodName: "ListReminders",
			Handler:    _ReminderService_ListReminders_Handler,
		},
		{
			MethodName: "ListSimpleReminders",
			Handler:    _ReminderService_ListSimpleReminders_Handler,
		},
		{
			MethodName: "GetUpcomingReminders",
			Handler:    _ReminderService_GetUpcomingReminders_Handler,
		},
		{
			MethodName: "PreviewReminder",
			Handler:    _ReminderService_PreviewReminder_Handler,
		},
		{
			MethodName: "SnoozeReminder",
			Handler:    _ReminderService_SnoozeReminder_Handler,
		},
		{
			MethodName: "ToggleReminderActive",
			Handler:    _ReminderService_ToggleReminderActive_Handler,
		},
		{
			MethodName: "CreateTestReminder",
			Handler:    _ReminderService_CreateTestReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminder.proto",
}
