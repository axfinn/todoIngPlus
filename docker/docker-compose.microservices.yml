# TodoIng - 微服务完整方案
# 包含 API网关、服务发现、消息队列、缓存、监控等
# 使用: docker-compose -f docker-compose.microservices.yml up -d

version: '3.8'

services:
  # ==== 基础设施服务 ====
  
  # 服务发现 - Consul
  consul:
    image: consul:latest
    container_name: todoing_consul
    restart: always
    ports:
      - "8500:8500"
    command: consul agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - todoing_infrastructure_network

  # API 网关 - Kong
  kong-database:
    image: postgres:13
    container_name: todoing_kong_db
    restart: always
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong123
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - todoing_infrastructure_network

  kong:
    image: kong:latest
    container_name: todoing_kong
    restart: always
    ports:
      - "8000:8000"  # API Gateway
      - "8001:8001"  # Admin API
      - "8443:8443"  # HTTPS
      - "8444:8444"  # Admin HTTPS
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong123
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-database
    networks:
      - todoing_infrastructure_network
      - todoing_api_network

  # 消息队列 - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: todoing_rabbitmq
    restart: always
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - todoing_infrastructure_network

  # ==== 数据存储服务 ====
  
  # MongoDB 集群
  mongodb-primary:
    image: mongo:7-jammy
    container_name: todoing_mongodb_primary
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: todoing
    volumes:
      - mongodb_data_primary:/data/db
    networks:
      - todoing_data_network
    command: --replSet rs0 --bind_ip_all

  # Redis 集群
  redis-master:
    image: redis:7-alpine
    container_name: todoing_redis_master
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data_master:/data
    networks:
      - todoing_data_network

  # ==== 核心业务服务 ====
  
  # 用户认证服务
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: todoing_auth_service
    restart: always
    ports:
      - "5001:5001"
    environment:
      PORT: 5001
      SERVICE_NAME: auth-service
      CONSUL_URL: http://consul:8500
      MONGO_URI: mongodb://admin:admin123@mongodb-primary:27017/todoing_auth?authSource=admin
      REDIS_URL: redis://:redis123@redis-master:6379
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - consul
      - mongodb-primary
      - redis-master
      - rabbitmq
    networks:
      - todoing_infrastructure_network
      - todoing_data_network
      - todoing_api_network

  # 任务管理服务
  task-service:
    build:
      context: ./services/tasks
      dockerfile: Dockerfile
    container_name: todoing_task_service
    restart: always
    ports:
      - "5002:5002"
    environment:
      PORT: 5002
      SERVICE_NAME: task-service
      CONSUL_URL: http://consul:8500
      MONGO_URI: mongodb://admin:admin123@mongodb-primary:27017/todoing_tasks?authSource=admin
      REDIS_URL: redis://:redis123@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      AUTH_SERVICE_URL: http://auth-service:5001
    depends_on:
      - consul
      - mongodb-primary
      - redis-master
      - rabbitmq
      - auth-service
    networks:
      - todoing_infrastructure_network
      - todoing_data_network
      - todoing_api_network

  # 报告服务
  report-service:
    build:
      context: ./services/reports
      dockerfile: Dockerfile
    container_name: todoing_report_service
    restart: always
    ports:
      - "5003:5003"
    environment:
      PORT: 5003
      SERVICE_NAME: report-service
      CONSUL_URL: http://consul:8500
      MONGO_URI: mongodb://admin:admin123@mongodb-primary:27017/todoing_reports?authSource=admin
      REDIS_URL: redis://:redis123@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      TASK_SERVICE_URL: http://task-service:5002
    depends_on:
      - consul
      - mongodb-primary
      - redis-master
      - rabbitmq
      - task-service
    networks:
      - todoing_infrastructure_network
      - todoing_data_network
      - todoing_api_network

  # 通知服务
  notification-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    container_name: todoing_notification_service
    restart: always
    ports:
      - "5004:5004"
    environment:
      PORT: 5004
      SERVICE_NAME: notification-service
      CONSUL_URL: http://consul:8500
      REDIS_URL: redis://:redis123@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    depends_on:
      - consul
      - redis-master
      - rabbitmq
    networks:
      - todoing_infrastructure_network
      - todoing_data_network

  # 文件服务
  file-service:
    build:
      context: ./services/files
      dockerfile: Dockerfile
    container_name: todoing_file_service
    restart: always
    ports:
      - "5005:5005"
    environment:
      PORT: 5005
      SERVICE_NAME: file-service
      CONSUL_URL: http://consul:8500
      MONGO_URI: mongodb://admin:admin123@mongodb-primary:27017/todoing_files?authSource=admin
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    depends_on:
      - consul
      - mongodb-primary
      - minio
    volumes:
      - file_uploads:/app/uploads
    networks:
      - todoing_infrastructure_network
      - todoing_data_network
      - todoing_api_network

  # 对象存储 - MinIO
  minio:
    image: minio/minio:latest
    container_name: todoing_minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - todoing_data_network

  # ==== 前端服务 ====
  
  # 主前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: todoing_frontend
    restart: always
    ports:
      - "3000:80"
    environment:
      VITE_API_GATEWAY_URL: http://localhost:8000
      VITE_APP_NAME: TodoIng Microservices
      VITE_APP_VERSION: 2.0.0
    networks:
      - todoing_frontend_network

  # 管理后台
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: todoing_admin_dashboard
    restart: always
    ports:
      - "3001:80"
    environment:
      VITE_API_GATEWAY_URL: http://localhost:8000
      VITE_CONSUL_URL: http://localhost:8500
      VITE_RABBITMQ_URL: http://localhost:15672
    networks:
      - todoing_frontend_network

  # ==== 监控服务 ====
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: todoing_prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-microservices.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - todoing_monitoring_network
      - todoing_infrastructure_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: todoing_grafana
    restart: always
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/microservices:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - todoing_monitoring_network

  # Jaeger 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: todoing_jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger Collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - todoing_monitoring_network

  # ==== 工具服务 ====
  
  # 数据库迁移
  migrator:
    build:
      context: ./tools/migrator
      dockerfile: Dockerfile
    container_name: todoing_migrator
    restart: "no"
    environment:
      MONGO_URI: mongodb://admin:admin123@mongodb-primary:27017/todoing?authSource=admin
    depends_on:
      - mongodb-primary
    networks:
      - todoing_data_network
    profiles:
      - migration

  # 服务健康检查
  healthcheck:
    build:
      context: ./tools/healthcheck
      dockerfile: Dockerfile
    container_name: todoing_healthcheck
    restart: always
    environment:
      CONSUL_URL: http://consul:8500
      CHECK_INTERVAL: 30s
    depends_on:
      - consul
    networks:
      - todoing_infrastructure_network
      - todoing_api_network

networks:
  todoing_infrastructure_network:
    driver: bridge
  todoing_api_network:
    driver: bridge
  todoing_data_network:
    driver: bridge
  todoing_frontend_network:
    driver: bridge
  todoing_monitoring_network:
    driver: bridge

volumes:
  consul_data:
    driver: local
  kong_db_data:
    driver: local
  rabbitmq_data:
    driver: local
  mongodb_data_primary:
    driver: local
  redis_data_master:
    driver: local
  minio_data:
    driver: local
  file_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
